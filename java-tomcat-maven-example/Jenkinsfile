pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    environment {
    ANSIBLE_CREDS = credentials('ansible')
    J_PATH = "${WORKSPACE}/java-tomcat-maven-example"
    }

    stages {
        stage('checkout') {
            steps {
                checkOut()
            }
        }

        stage('build'){
            steps {
                sh ''' 
                    cd ${J_PATH} && \
                    mvn clean package
                                    
                '''
            }
        }
        stage('deploy'){
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ansible', keyFileVariable: 'ansible_key', passphraseVariable: '', usernameVariable: 'ansible')]) {
    // some block

                sh '''
                    ansible -i gitlab-server, -m copy -a "src=${J_PATH}/target/dependency/*.jar dest=/opt/"  -u ansible --private-key ansible_key && \
                    ansible -i gitlab-server, -m copy -a "src=${J_PATH}/target/*.war dest=/opt/"  -u ansible --private-key ansible_key
                '''
                // sshPublisher(publishers: [sshPublisherDesc(configName: 'gitlab-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'ls /home/ansible', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '${WORKSPACE}/java-tomcat-maven-example/target/', sourceFiles: '${WORKSPACE}/java-tomcat-maven-example/target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                // sshPublisher(publishers: [sshPublisherDesc(configName: 'gitlab-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'ls /home/ansible', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '${WORKSPACE}/java-tomcat-maven-example/target/', sourceFiles: '${WORKSPACE}/java-tomcat-maven-example/target/dependency/*.jar')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }
        stage('start service'){
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'gitlab-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'java -jar *.jar *.war', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }
    }
}






// checkout

def checkOut() {
    git credentialsId: 'github', url: 'https://github.com/teachdops/jenkins.git'
}